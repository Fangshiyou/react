{"version":3,"sources":["Showtime.js","Todolist/Todoinput.js","Todolist/Todoing.js","Todolist/Todolist.js","index.js"],"names":["Component","Todoinput","handleInput","e","keyCode","props","add","target","value","handleChange","setState","name","parseInt","bind","state","a","b","c","this","focus","ref","inp","onChange","onKeyDown","type","onClick","console","log","Todoing","todo","map","item","idx","key","del","defaultProps","Todolist","addItem","ReactDOM","render","document","getElementById","className"],"mappings":"yOAEsCA,Y,mBCEjBC,E,YACjB,aAAc,IAAD,8BACT,+CAQJC,YAAc,SAACC,GAEM,KAAdA,EAAEC,SACD,EAAKC,MAAMC,IAAIH,EAAEI,OAAOC,QAZnB,EAgBbC,aAAe,SAACN,GACZ,EAAKO,SAAL,eACKP,EAAEI,OAAOI,KAAOC,SAA0B,KAAjBT,EAAEI,OAAOC,MAAW,EAAEL,EAAEI,OAAOC,UAhB7D,EAAKN,YAAc,EAAKA,YAAYW,KAAjB,gBACnB,EAAKC,MAAQ,CACTC,EAAE,GACFC,EAAE,GACFC,EAAE,IANG,E,iFAuBTC,KAAKH,EAAEI,U,+BAGD,IAAD,OACL,OACI,6BACI,2BAAOC,IAAK,SAACC,GAAO,EAAKN,EAAEM,GAAMV,KAAK,IAAIW,SAAUJ,KAAKT,aAAcD,MAAOU,KAAKJ,MAAMC,EAAGQ,UAAWL,KAAKhB,YAAasB,KAAK,SADlI,IAGI,2BAAOJ,IAAI,IAAIT,KAAK,IAAIW,SAAUJ,KAAKT,aAAcD,MAAOU,KAAKJ,MAAME,EAAGO,UAAWL,KAAKhB,YAAasB,KAAK,SAHhH,IAKI,2BAAOb,KAAK,IAAIW,SAAUJ,KAAKT,aAAcD,MAAOU,KAAKJ,MAAMG,EAAGM,UAAWL,KAAKhB,YAAasB,KAAK,SALxG,IAOI,2BAAIN,KAAKJ,MAAMC,EAAEG,KAAKJ,MAAME,EAAEE,KAAKJ,MAAMG,GAEzC,2BAAOG,IAAK,SAACC,GAAO,EAAKA,IAAIA,GAAMG,KAAK,SAExC,4BAAQC,QAAS,WAAKC,QAAQC,IAAI,EAAKN,IAAIb,SAA3C,qB,GAxCuBR,aCDlB4B,E,iLACP,IAAD,OACAC,EAAQX,KAAKb,MAAbwB,KACL,OACI,4BAEQA,EAAKC,KAAI,SAACC,EAAKC,GAAN,OACL,wBAAIC,IAAKD,GACJD,EADL,MACa,4BAAQN,QAAS,kBAAI,EAAKpB,MAAM6B,IAAIF,KAApC,yB,GARAhC,aAmBrC4B,EAAQO,aAAe,CACnBN,KAAM,CAAC,EAAE,EAAE,EAAE,EAAE,I,ICnBEO,E,YACjB,aAAc,IAAD,8BACT,+CACKtB,MAAQ,CACTe,KAAK,CAAC,EAAE,EAAE,IAHL,E,uEAOTH,QAAQC,IAAI,O,+BAGZ,OACI,6BACI,kBAAC,EAAD,CAAWrB,IAAKY,KAAKmB,UACrB,kBAAC,EAAD,CAASR,KAAMX,KAAKJ,MAAMe,Y,GAdJ7B,aCmBtCsC,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,SAiHlBD,SAASC,eAAe,QAK9BC,UAAY,W","file":"static/js/main.7b33db4d.chunk.js","sourcesContent":["import React,{Fragment,Component} from 'react';\n// 类定义组件\nexport default class ShowTime extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            time: new Date().toLocaleString(),\n            a: 100,\n            b: 200\n        }\n        console.log('constructor')\n        setTimeout(()=>{\n            this.setState({\n                time: new Date().toLocaleString()\n            })\n        },1000)\n    }\n    shouldComponentUpdate(){\n        if(this.state.a>10){\n            return true;\n        }\n        return false;\n    }\n    componentDidUpdate(preProps,preState,data){\n        console.log('didupdate');\n        console.log(preState)\n        console.log(this.state.time)\n    }\n    getSnapshotBeforeUpdate(){\n        console.log('getSnapshot');\n        return {name: this.state.a}\n    }\n    componentDidMount(){\n        console.log('didmount');\n    }\n    render(){\n        console.log('render');\n        var {name,age} = this.props;\n        return (\n            <Fragment>\n                {/* 条件渲染 */}\n                {name.length>5?<div>姓名：{name}</div>:''}\n                {name.length>5&&<div>姓名：{name}</div>}\n                <div>{this.state.time}</div>\n                {/* 循环渲染 */}\n                <div>\n                    {\n                        age.map((item,index)=>{\n                            if(index%2 === 0){\n                                return <p key={index}>{item}</p>\n                            }\n                        })\n                    }\n                </div>\n            </Fragment>\n        )\n    }\n}\n// 默认导出：只能导出一次，被引入时可以重命名\n// export default ShowTime;\n\n// 命名导出：可以导出多个，被引入时与导出的名一致\n// export {ShowTime};","import React, { Component } from 'react'\n// 受控组件：value值被react控制的表单元素\n// 可以实时获取表单元素的值（表单验证）/写法相对麻烦\n\nexport default class Todoinput extends Component {\n    constructor(){\n        super();\n        this.handleInput = this.handleInput.bind(this);\n        this.state = {\n            a:'',\n            b:'',\n            c:''\n        }\n    }\n    handleInput = (e)=>{\n        // 绑定this，事件处理函数写成箭头函数，或者用bind\n        if(e.keyCode === 13){\n            this.props.add(e.target.value);\n        }\n    }\n   \n    handleChange = (e)=>{\n        this.setState({\n            [e.target.name]: parseInt(e.target.value===''?0:e.target.value)\n        })\n    } \n    //render 之后执行的componentDidMount(){};\n    componentDidMount(){\n        this.a.focus();\n        //this.refs.b.fucus();\n    }\n    render() {\n        return (//ref 获取节点使用\n            <div>\n                <input ref={(inp)=>{this.a=inp}} name=\"a\" onChange={this.handleChange} value={this.state.a} onKeyDown={this.handleInput} type=\"text\"/>\n                +\n                <input ref='b' name=\"b\" onChange={this.handleChange} value={this.state.b} onKeyDown={this.handleInput} type=\"text\"/>\n                +\n                <input name=\"c\" onChange={this.handleChange} value={this.state.c} onKeyDown={this.handleInput} type=\"text\"/>\n                =\n                <p>{this.state.a+this.state.b+this.state.c}</p>\n                {/*非受控组件:一次性获取或处理表单元素的值*/}\n                <input ref={(inp)=>{this.inp=inp}} type=\"text\"/>\n\n                <button onClick={()=>{console.log(this.inp.value)}}>提交</button>\n            </div>\n        )\n    }\n}\n// 受控组件：\n// 1、给input标签添加value属性，赋值为state的值\n// 2、给input标签绑定onChange事件，\n// 在事件处理函数中setState\n// 3、一个事件处理函数控制多个表单元素时，\n// 给input标签加上name属性,事件处理函数中写：\n// setState({[e.target.name]:e.target.value})","import React, { Component } from 'react'\nimport PropTypes from 'prop-types';\n\nexport default class Todoing extends Component {\n    render() {\n        var {todo} = this.props;\n        return (\n            <ul>\n                {\n                    todo.map((item,idx)=>\n                        <li key={idx}>\n                            {item}---<button onClick={()=>this.props.del(idx)}>删除</button>\n                        </li>)\n                }\n            </ul>\n        )\n    }\n}\nTodoing.propTypes = {\n    todo: PropTypes.array,\n    del: PropTypes.func\n}\nTodoing.defaultProps = {\n    todo: [1,2,3,4,4]\n}","import React, { Component } from 'react'\nimport Todoinput from './Todoinput'\nimport Todoing from './Todoing'\n\nexport default class Todolist extends Component {\n    constructor(){\n        super();\n        this.state = {\n            todo:[1,2,3]\n        }\n    }\n    addItem(){\n        console.log(123);\n    }\n    render() {\n        return (\n            <div>\n                <Todoinput add={this.addItem}/>\n                <Todoing todo={this.state.todo}/>\n            </div>\n        )\n    }\n}\n","import React,{Fragment,Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport ShowTime from './Showtime';\nimport './index.css';\nimport Todolist from './Todolist/Todolist';\n// 函数声明组件\n// function ShowTime(props){\n//     console.log(props);\n//     return (<Fragment>\n//                 <div>{props.name}{props.age}</div>\n//                 <div>\n//                     {new Date().toLocaleString()}\n//                 </div>\n//             </Fragment>\n//         )\n// }\n\n\n// 组件交互\n// 父组件---->子组件：调用子组件时添加属性，子组件通过props拿到传递的数据\n// 子组件---->父组件：\n\n\nReactDOM.render(\n    <Todolist/>,\n    document.getElementById('root')\n)\n\n\n// var num = [1,2,3,4,5];\n// ReactDOM.render(\n//     <ShowTime age={num} name=\"zhangsan\"/>,\n//     document.getElementById('root')\n// )\n\n\n\n\n\n// 显示当前系统时间\n// function showTime(){\n//     var ele = <div>\n//                 <p>当前时间是：</p>\n//                 <div>{new Date().toLocaleString()}</div>;\n//             </div>;\n//     ReactDOM.render(\n//         ele,\n//         document.querySelector('#root')\n//     );\n// } \n// showTime();\n// setInterval(showTime,1000);\n\n\n\n\n\n// react技术栈\n// jsx语法\n// var ele = <h1 class=\"tit\">hello <p>react</p></h1>;\n// babel编译，返回一个对象\n// var ele = React.createElement(\n//     'h1',\n//     {id:'tit',class:'title'},\n//     'hello',\n//     React.createElement(\n//         'p',\n//         {id:'t',class:'tit'},\n//         'react')\n// );\n// ReactDOM.render(ele, document.getElementById('root'));\n// 自己封装render函数\nvar obj = {\n    type: 'div',\n    props: {\n        id: 'box',\n        class: 'box',\n        children: [\n            'hello',\n            'react',\n            {\n                type: 'h1',\n                props: {\n                    id: 'tit',\n                    class: 'tit',\n                    children: [\n                        'title',\n                        'react'\n                    ]\n                }\n            }\n        ]\n    }\n}\nfunction render(obj,container){\n    var {type,props} = obj;\n    // 文档碎片\n    var fragment = document.createDocumentFragment();\n\n    var ele = document.createElement(type);\n    for(var item in props){\n        if(item === 'class'){\n            ele.className = props[item]\n        }else if(item === 'children'){\n            for(var i=0;i<props.children.length;i++){\n                // ele.innerHTML += props.children[i];\n                if(typeof props.children[i] === 'object'){\n                    render(props.children[i],ele);\n                }else{\n                    var txt = document.createTextNode(props.children[i]);\n                    ele.appendChild(txt);\n                }\n            }\n        }else{\n            ele[item] = props[item];\n        }\n    }\n    fragment.appendChild(ele);\n    container.appendChild(fragment);\n}\n// render(obj,document.getElementById('root'));\n// 页面渲染过程\n// 请求HTML页面、浏览器HTML解析器解析html文件、生成DOM树\n// link引入css文件、css解析器解析CSS，生成CSS对象模型，CSSOM和DOM tree结合生成一个render tree，最后浏览器绘制页面\n\n// 页面回流（重排reflow）：DOM结构变化、内容变化、大小、位置的变化、显示的变化\n// 页面重绘（repaint）：颜色的变化（背景色、字体颜色、边框颜色）\n\n// 1、先用变量进行dom处理，最后一次渲染\n// console.time('time');\n// var div = document.getElementById('root');\n// var str = ''\n// for(var i=0;i<1000;i++){\n//     str += '<p>'+i+'</p>';\n// }\n// div.innerHTML = str;\n// console.timeEnd('time');\n// 2、对于样式处理,声明一个css类\nvar div = document.getElementById('root');\n// div.style.width = '100px';\n// div.style.height = '100px';\n// div.style.background = 'red';\n\ndiv.className = 'active';\n// 3、offsetLeft、offsetWidth等都会引起回流，要慎用\n// console.log(div.offsetLeft);\n// var wid = div.offsetWidth;\n// setInterval(()=>{\n//     wid += 1;\n//     div.style.width = wid + 'px';\n// },100)\n// 4、文档碎片（内存中的一个变量）"],"sourceRoot":""}